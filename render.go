package main

import (
	"fmt"
	"io"
	"path/filepath"
	"strings"
	"text/template"
)

var (
	generatedTemplate = template.Must(template.New("render").Parse(`// generated by joiner -- DO NOT EDIT
package {{.Package}}

import (
	"fmt"
	"strings"
)
{{range .Types}}{{if not .IsStringer}}
func (t {{.Name}}) String() string {
	return fmt.Sprintf("%#v", t)
}
{{end}}
type Join{{.Name}} []{{.Name}}

func (j Join{{.Name}}) With(sep string) string {
	all := make([]string, 0, len(j))
	for _, s := range j {
		all = append(all, s.String())
	}
	return strings.Join(all, sep)
}
{{end}}`))
)

type GeneratedType struct {
	Name       string
	IsStringer bool
}

func getRenderedPath(inputPath string) (string, error) {
	if !strings.HasSuffix(inputPath, ".go") {
		return "", fmt.Errorf("Input path %s doesn't have .go extension", inputPath)
	}
	trimmed := strings.TrimSuffix(inputPath, ".go")
	dir, file := filepath.Split(trimmed)
	return filepath.Join(dir, fmt.Sprintf("%s_joiner.go", file)), nil
}

type generateTemplateData struct {
	Package string
	Types   []GeneratedType
}

func render(w io.Writer, packageName string, types []GeneratedType) error {
	return generatedTemplate.Execute(w, generateTemplateData{packageName, types})
}
